import { angleToCoord } from "./angleToCoord";

/**
 * Generates the coordinates of the points along the nVertices axis lines (one for each indicator originating from the center)
 * where the diagonal lines meet the axis line. At this stage the diagonals have not been plotted but the coordinates generated by this function
 * are used to generate the coordinate pairs required to plot each diagonal.
 *
 *
 * @param {number} level - Level of the hexagon in question. The innermost hexagon is level 2 , the outermost is 10 (this is going off a score generator between 1 and 10 but could be any interval)
 * @param {number} nVertices - number of plot vertices (determined by length of data).
 * @param {number} width - width of svg
 * @param {number} height- height of svg
 * @param {number[]} domainArray used to define the domain of the scale define in angleToCoord
 * @param {number[]} rangeArray used to define the range of the scale define in angleToCoord
 */

interface Props {
  nVertices: number;
  level: number;
  width: number;
  domainArray: number[];
  rangeArray: number[];
}

export const getLevelCoords = ({
  nVertices,
  level,
  width,
  domainArray,
  rangeArray,
}: Props) => {
  const coordinates = [];

  for (let i = 0; i < nVertices; i += 1) {
    const angle = Math.PI / 2 + (2 * Math.PI * i) / nVertices;
    const coordinate = angleToCoord({
      angle,
      value: level,
      width,
      domainArray,
      rangeArray,
    });
    coordinates.push(coordinate);
  }

  return coordinates;
};
